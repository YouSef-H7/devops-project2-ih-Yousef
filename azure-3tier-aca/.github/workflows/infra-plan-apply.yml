name: Infrastructure Plan and Apply

on:
  push:
    branches: [main]
    paths: ['terraform/**']
  pull_request:
    branches: [main]
    paths: ['terraform/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.7'
  WORKING_DIRECTORY: ./azure-3tier-aca/terraform/main

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set environment variables
      run: |
        if [[ "${{ github.event.inputs.environment }}" == "prod" ]] || [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event.inputs.environment }}" == "" ]]; then
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "TF_VAR_FILE=../environments/prod.tfvars" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "TF_VAR_FILE=../environments/dev.tfvars" >> $GITHUB_ENV
        fi

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        terraform init \
          -backend-config="../backend.hcl" \
          -backend-config="key=${{ env.ENVIRONMENT }}.tfstate"

    - name: Terraform Validate
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: terraform validate

    - name: Terraform Format Check
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: terraform fmt -check

    - name: Terraform Plan
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        terraform plan \
          -var-file="${{ env.TF_VAR_FILE }}" \
          -out=tfplan \
          -detailed-exitcode

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan-${{ env.ENVIRONMENT }}
        path: ${{ env.WORKING_DIRECTORY }}/tfplan
        retention-days: 7

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          try {
            const planOutput = execSync('cd ${{ env.WORKING_DIRECTORY }} && terraform show -no-color tfplan', { encoding: 'utf8' });
            
            const body = `## Terraform Plan (${{ env.ENVIRONMENT }})
            
            <details>
            <summary>Click to expand</summary>
            
            \`\`\`
            ${planOutput}
            \`\`\`
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          } catch (error) {
            console.log('Error creating comment:', error);
          }

  terraform-apply:
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    needs: terraform-plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set environment variables
      run: |
        if [[ "${{ github.event.inputs.environment }}" == "dev" ]]; then
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "TF_VAR_FILE=../environments/dev.tfvars" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "TF_VAR_FILE=../environments/prod.tfvars" >> $GITHUB_ENV
        fi

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan-${{ env.ENVIRONMENT }}
        path: ${{ env.WORKING_DIRECTORY }}

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        terraform init \
          -backend-config="../backend.hcl" \
          -backend-config="key=${{ env.ENVIRONMENT }}.tfstate"

    - name: Terraform Apply
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: terraform apply tfplan

  terraform-destroy:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set environment variables
      run: |
        if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "TF_VAR_FILE=../environments/prod.tfvars" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "TF_VAR_FILE=../environments/dev.tfvars" >> $GITHUB_ENV
        fi

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        terraform init \
          -backend-config="../backend.hcl" \
          -backend-config="key=${{ env.ENVIRONMENT }}.tfstate"

    - name: Terraform Destroy
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        terraform destroy \
          -var-file="${{ env.TF_VAR_FILE }}" \
          -auto-approve